{"version":3,"sources":["App/components/DrawForm/DrawForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DrawForm","img","canvasRef","useRef","contextRef","useState","width","setWidth","height","setHeight","newImg","setNewImg","isDrawing","setIsDrawing","offsetArray","setOffsetX","console","log","useEffect","Image","src","onload","canvas","current","style","context","getContext","Error","drawImage","scale","lineCap","strokeStyle","lineWidth","className","onMouseDown","event","nativeEvent","offsetX","offsetY","beginPath","moveTo","onMouseUp","closePath","onMouseMove","lineTo","stroke","setXY","x","y","ref","filter","_","index","map","coordinate","App","dnd","setdnd","setimg","dragHandler","e","preventDefault","dragLeaveHandler","handleFile","target","result","onDragStart","onDragLeave","onDragOver","onDrop","content","dataTransfer","files","fileData","FileReader","onloadend","readAsDataURL","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.505858c0.chunk.js","sourcesContent":["import { FC, useCallback, useEffect, useRef, useState } from \"react\";\r\nimport \"./DrawForm.css\";\r\ninterface typeDrawFormProps {\r\n  img: string;\r\n}\r\n\r\nexport const DrawForm: FC<typeDrawFormProps> = ({ img }) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const contextRef = useRef<CanvasRenderingContext2D | null>(null);\r\n  const [width, setWidth] = useState<number>(0);\r\n  const [height, setHeight] = useState<number>(0);\r\n  const [newImg, setNewImg] = useState<HTMLImageElement>();\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const [offsetArray, setOffsetX] = useState<Array<{x:number, y:number}>>([]);\r\n\r\n  console.log(height);\r\n  useEffect(() => {\r\n    const newImg = new Image();\r\n    newImg.src = img;\r\n    newImg.onload = function () {\r\n      setWidth(newImg.width);\r\n      setHeight(newImg.height);\r\n    };\r\n    setNewImg(newImg);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"inside\", width, height);\r\n    const canvas = canvasRef.current;\r\n    canvas!.width = width;\r\n    canvas!.height = height;\r\n    canvas!.style.width = `${width}px`;\r\n    canvas!.style.height = `${height}px`;\r\n    const context = canvas!.getContext(\"2d\");\r\n    if (context == null) throw new Error(\"Could not get context\");\r\n    if (context && newImg) {\r\n      context.drawImage(newImg, 0, 0, width, height);\r\n      context.scale(2, 2);\r\n      context.lineCap = \"round\";\r\n      context.strokeStyle = \"red\";\r\n      context.lineWidth = 2;\r\n      contextRef.current = context;\r\n    }\r\n  }, [width, height, newImg]);\r\n\r\n  const startDrawing = (event: React.MouseEvent<HTMLCanvasElement>) => {\r\n    const { nativeEvent } = event;\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    if (contextRef == null) throw new Error(\"Could not get context\");\r\n    if (contextRef.current) {\r\n      contextRef.current.beginPath();\r\n      contextRef.current.moveTo(offsetX, offsetY);\r\n      setIsDrawing(true);\r\n    }\r\n  };\r\n\r\n  const finishDrawing = () => {\r\n    if (contextRef.current) {\r\n      contextRef.current.closePath();\r\n      setIsDrawing(false);\r\n    }\r\n  };\r\n\r\n  const draw = (event: React.MouseEvent<HTMLCanvasElement>) => {\r\n    const { nativeEvent } = event;\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    if (contextRef.current) {\r\n      contextRef.current.lineTo(offsetX, offsetY);\r\n      contextRef.current.stroke();\r\n\r\n      const setXY = {\r\n        x: offsetX,\r\n        y: offsetY,\r\n      };\r\n      setOffsetX([...offsetArray, setXY]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex\">\r\n      <canvas\r\n        onMouseDown={startDrawing}\r\n        onMouseUp={finishDrawing}\r\n        onMouseMove={draw}\r\n        ref={canvasRef}\r\n      ></canvas>\r\n      <div className=\"result\">\r\n        {height && width && <div>{`${width} x  ${height} `}</div>}\r\n        <div className=\"tab\">\r\n          {offsetArray\r\n            .filter((_, index) => index % 10 === 0)\r\n            .map((coordinate) => (\r\n              <div className=\"card\">{`${coordinate.x}:${coordinate.y}`}</div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DrawForm;\r\n","import React, { DragEvent, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport DrawForm from \"./App/components/DrawForm/DrawForm\";\n\nfunction App() {\n  const [dnd, setdnd] = useState(false);\n  const [img, setimg] = useState();\n  const [width, setWidth] = useState<any>();\n  const [height, setHeight] = useState<any>();\n\n  const dragHandler = (e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setdnd(true);\n  };\n\n  const dragLeaveHandler = (e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setdnd(false);\n  };\n\n  const handleFile = (e: any) => {\n    setimg(e.target.result);\n    // You can set content in state and show it in render.\n\n  };\n\n  const onDropHandler = (e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    const content = e.dataTransfer.files[0];\n    let fileData = new FileReader();\n    fileData.onloadend = handleFile;\n    fileData.readAsDataURL(content);\n  };\n\n  return (\n    <div className=\"App\">\n      {img ? (\n        <DrawForm img={img}/>\n      ) : dnd ? (\n        <div\n          className=\"dnd-space\"\n          onDragStart={dragHandler}\n          onDragLeave={dragLeaveHandler}\n          onDragOver={dragHandler}\n          onDrop={onDropHandler}\n        >\n          Молодец, теперь отпускай, не бойся\n        </div>\n      ) : (\n        <div\n          onDragStart={dragHandler}\n          onDragLeave={dragLeaveHandler}\n          onDragOver={dragHandler}\n        >\n          Дружище, перетащи сюда картинку\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}